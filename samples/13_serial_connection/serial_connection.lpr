program serial_connection;

{$mode objfpc}{$H+}

{ Sample 13 Serial Connection                                                  }
{                                                                              }
{  The project simply calls a "main" function in the C/C++ project and passes  }
{  all command line arguments to it. The main function can then do anything it }
{  requires by calling Ultibo API functions, standard C library funtions or    }
{  other libraries.                                                            }
{                                                                              }
{  Note that you can call your main function anything you like except main.    }
{  Free Pascal has an internal alias of MAIN that refers to the begin/end      }
{  section of the project file below (also known as PASCALMAIN).               }
{                                                                              }
{  You are also not limited to just calling a single main function from the    }
{  Free Pascal project, you can include other Free Pascal functionality such   }
{  as creating additional threads and including optional units. You can also   }
{  call directly to multiple functions within your C/C++ project from multiple }
{  threads which can be created here or created inside you C/C++ project.      }
{                                                                              }
{  To compile the project use the template Makefile from the command line.     }
{                                                                              }
{  Once compiled copy the kernel image file to an SD card along with the       }
{  firmware files and use it to boot your Raspberry Pi.                        }

{Include the standard Ultibo units}
uses
 {$IFDEF RPIB}
  RaspberryPi,     {Include RaspberryPi to make sure all standard drivers are available}
  {$DEFINE BOARD_DEFINED}
 {$ENDIF}
 {$IFDEF RPI2B}
  RaspberryPi2,    {Include RaspberryPi2 to make sure all standard drivers are available}
  {$DEFINE BOARD_DEFINED}
 {$ENDIF}
 {$IFDEF RPI3B}
  RaspberryPi3,    {Include RaspberryPi3 to make sure all standard drivers are available}
  {$DEFINE BOARD_DEFINED}
 {$ENDIF}
 {$IFDEF RPI4B}
  RaspberryPi4,    {Include RaspberryPi4 to make sure all standard drivers are available}
  {$DEFINE BOARD_DEFINED}
 {$ENDIF}
 {$IFDEF QEMUVPB}
  QEMUVersatilePB, {Include QEMUVersatilePB to make sure all standard drivers are available}
  {$DEFINE BOARD_DEFINED}
 {$ENDIF}
 {$IFNDEF BOARD_DEFINED}
  RaspberryPi2,    {Include RaspberryPi2 if nothing else was defined (eg Building from Lazarus)}
 {$ENDIF}
 API,              {Include the API unit to export the Ultibo API}
 GlobalTypes,
 GlobalConfig,
 Platform,
 Threads,
 {$IFDEF USE_WEBSTATUS}
 HTTP,             {Include the HTTP unit for the server classes}
 WebStatus,        {Include Web Status for browser access to Ultibo information}
 {$ENDIF}
 {$IFDEF USE_SHELL}
 RemoteShell,      {Include the Shell units for Telnet command line access}
 ShellUSB,
 ShellUpdate,
 ShellNetwork,
 ShellFilesystem,
 {$ENDIF}
 Syscalls,         {Include the Syscalls unit for standard C library support}
 UltiboUtils;

{Link our C/C++ object files by including the autogenerated include files}
{$INCLUDE __linklib.inc}
{$INCLUDE __link.inc}

{Import the main function of the project so we can call it from Ultibo}
function APIMain(argc: int; argv: PPChar): int; cdecl; external name 'apimain';

{Variables to hold argc and argv to pass to our C/C++ project}
var
 argc:int;
 argv:PPChar;

 {$IFDEF USE_WEBSTATUS}
 HTTPListener: THTTPListener;
 {$ENDIF}

begin
 {$IFDEF USE_WEBSTATUS}
 {Create the HTTP Listener and register the web status pages}
 HTTPListener := THTTPListener.Create;
 HTTPListener.Active := True;
 WebStatusRegister(HTTPListener, '', '', True);
 {$ENDIF}

 {Allocate the command line arguments}
 argv:=AllocateCommandLine(SystemGetCommandLine,argc);

 {Call the "main" function of our C/C++ project}
 APIMain(argc,argv);

 {Release the command line}
 ReleaseCommandLine(argv);

 {Halt the main thread if we return}
 ThreadHalt(0);
end.